name: Build and Release devtools

on:
  push:
    tags:
      - "v*.*.*" # Triggers on versioned tags (e.g., v1.0.0)

permissions:
  contents: write # Grant permission to create releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest] # Build for Windows, Linux, macOS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Write Version File
        run: echo "${{ github.ref_name }}" > .version

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m venv .venv
          .venv\Scripts\activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
        shell: powershell

      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
        shell: bash

      - name: Run build script (Windows)
        if: runner.os == 'Windows'
        run: .venv\Scripts\python.exe build.py --ci --clean
        shell: pwsh

      - name: Run build script (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          python build.py --ci --clean
        shell: bash

      # Test step for Windows executables
      - name: Test built executable (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $EXPECTED_VERSION = "${{ github.ref_name }}"
          Write-Host "Expected version is $EXPECTED_VERSION"
          $OUTPUT = & .\dist\devt.exe self version
          Write-Host "Output is $OUTPUT"
          if (-not $OUTPUT.Contains($EXPECTED_VERSION)) {
            Write-Error "Version mismatch: expected '$EXPECTED_VERSION' to be in output"
            exit 1
          }

      # Test step for Linux and macOS executables
      - name: Test built executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          EXPECTED_VERSION=$(cat .version)
          echo "Expected version is $EXPECTED_VERSION"
          OUTPUT=$(./dist/devt self version)
          echo "Output is $OUTPUT"
          if [[ "$OUTPUT" != *"$EXPECTED_VERSION"* ]]; then
            echo "Version mismatch: expected '$EXPECTED_VERSION' to be in output"
            exit 1
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: devt-${{ runner.os }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: devt-Windows
          path: dist-windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: devt-Linux
          path: dist-linux

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: devt-macOS
          path: dist-macos

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: "Automated release of devt version ${{ github.ref_name }}."
          draft: false
          prerelease: false
          files: |
            dist-windows/devt.exe
            dist-windows/devt_installer.exe
            dist-linux/devt
            dist-linux/devt_installer
            dist-macos/devt
            dist-macos/devt_installer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
