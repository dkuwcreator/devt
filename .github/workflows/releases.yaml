name: Build and Release devtools

on:
  push:
    tags:
      - "v*.*.*"  # Triggers on versioned tags (e.g., v1.0.0)

permissions:
  contents: write  # Grant permission to create releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}

      - name: Write Version File
        run: echo "${{ github.ref_name }}" > .version

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Run build script (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: .\.venv\Scripts\python.exe build.py --ci

      - name: Run build script (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          source .venv/bin/activate
          python build.py --ci

      - name: Test built main executable (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $EXPECTED_VERSION = Get-Content .version
          Write-Host "Expected version is $EXPECTED_VERSION"
          $OUTPUT = & .\dist\devt-windows.exe self version
          Write-Host "Output is $OUTPUT"
          if ($OUTPUT -notmatch $EXPECTED_VERSION) {
            Write-Error "Version mismatch: expected '$EXPECTED_VERSION' to be in output"
            exit 1
          }

      - name: Test built main executable (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          EXPECTED_VERSION=$(cat .version)
          echo "Expected version is $EXPECTED_VERSION"
          if [ "$(uname)" = "Darwin" ]; then
            exe_name="devt-macos"
          else
            exe_name="devt-linux"
          fi
          OUTPUT=$(./dist/$exe_name self version)
          echo "Output is $OUTPUT"
          if [[ "$OUTPUT" != *"$EXPECTED_VERSION"* ]]; then
            echo "Version mismatch: expected '$EXPECTED_VERSION' to be in output"
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: devt-${{ runner.os }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: devt-Windows
          path: dist-windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: devt-Linux
          path: dist-linux

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: devt-macOS
          path: dist-macos

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: "Automated release of devt version ${{ github.ref_name }}."
          draft: false
          prerelease: false
          files: |
            dist-windows/devt-windows.exe
            dist-windows/devt-installer-windows.exe
            dist-linux/devt-linux
            dist-linux/devt-installer-linux
            dist-macos/devt-macos
            dist-macos/devt-installer-macos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
